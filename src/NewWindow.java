package luaide;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author vulture
 */
public class NewWindow extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private LinkedList<SynEdit> editors = new LinkedList<>();
    ConsoleWindow terminal = new ConsoleWindow();

    public NewWindow() {
        this.setTitle("LuaIDE");
        initComponents();
        loadDirectory(System.getProperty("user.dir"));
        addEditor("", "print('Hello, lua')");
    }

    private void loadDirectory(String file) {
        File fp = new File(file);
        if (!fp.exists()) {
            System.err.println("error: " + file + " does not extit");
            return;
        }

        if (fp.isFile()) {
            return;
        }

        if (fp.isDirectory()) {
            DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
            DefaultMutableTreeNode top = new DefaultMutableTreeNode(fp.getName());
            model.setRoot(top);
            jTree1.setModel(model);
            createNodes(top, fp);
        }
    }

    private void createNodes(DefaultMutableTreeNode top, File fp) {
        DefaultMutableTreeNode folder = null;
        DefaultMutableTreeNode filed = null;
        
        File[] files = fp.listFiles();
        
        for(File file: files) {
            if (file.isFile()) {
                DefaultMutableTreeNode f = new DefaultMutableTreeNode(file.getName()); 
                top.add(f);
            } else {
                DefaultMutableTreeNode dir = new DefaultMutableTreeNode(file.getName());
                createNodes(dir, file);
                top.add(dir);
            }
        }
    }

    public void addEditor(String file) {
        if (file.isEmpty()) {
            file = "New file";
        }
        SynEdit editor = new SynEdit();
        jTabbedPane1.addTab(file, editor);
        editors.add(editor);
    }

    public void addEditor(String file, String txt) {
        if (file.isEmpty()) {
            file = "New file";
        }
        SynEdit editor = new SynEdit();
        editor.setText(txt);
        jTabbedPane1.addTab(file, editor);
        editors.add(editor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemNewScript = new javax.swing.JMenuItem();
        jMenuItemNewProject = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemOpenScript = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemUndo = new javax.swing.JMenuItem();
        jMenuItemRedo = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItemSelectAll = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemCompile = new javax.swing.JMenuItem();
        jMenuItemRun = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jMenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(500, 500));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree1);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jMenu1.setText("File");

        jMenuItemNewScript.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNewScript.setText("New Script");
        jMenuItemNewScript.setToolTipText("Create a new lua file");
        jMenuItemNewScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewScriptActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemNewScript);

        jMenuItemNewProject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNewProject.setText("New Project");
        jMenuItemNewProject.setToolTipText("Create a new lua project");
        jMenuItemNewProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewProjectActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemNewProject);
        jMenu1.add(jSeparator1);

        jMenuItemOpenScript.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpenScript.setText("Open Script");
        jMenuItemOpenScript.setToolTipText("Load a single lua file");
        jMenuItemOpenScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenScriptActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemOpenScript);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Open Project");
        jMenuItem4.setToolTipText("Open a single lua project");
        jMenu1.add(jMenuItem4);

        jMenu6.setText("Open recent");
        jMenu6.setToolTipText("Open files and projects that are recent");
        jMenu1.add(jMenu6);
        jMenu1.add(jSeparator2);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Close Project");
        jMenuItem5.setToolTipText("Close the current project");
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Close File");
        jMenuItem6.setToolTipText("Close the currently focused file");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);
        jMenu1.add(jSeparator3);

        jMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSave.setText("Save");
        jMenuItemSave.setToolTipText("Save file");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSave);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("Save as");
        jMenuItem9.setToolTipText("Save under a different name");
        jMenu1.add(jMenuItem9);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("Save all");
        jMenuItem10.setToolTipText("Save all open files");
        jMenu1.add(jMenuItem10);
        jMenu1.add(jSeparator4);

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemExit.setText("Exit");
        jMenuItemExit.setToolTipText("Quit this application");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItemUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemUndo.setText("Undo");
        jMenuItemUndo.setToolTipText("Reverses a wrong action");
        jMenuItemUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUndoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemUndo);

        jMenuItemRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemRedo.setText("Redo");
        jMenuItemRedo.setToolTipText("Reproduce what was removed");
        jMenuItemRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRedoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemRedo);
        jMenu2.add(jSeparator5);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setText("Cut");
        jMenuItem12.setToolTipText("Cut text to clipboard");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem12);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Copy");
        jMenuItem7.setToolTipText("Copy text to clipboard");
        jMenu2.add(jMenuItem7);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setText("Paste");
        jMenuItem11.setToolTipText("Paste text from clipboard");
        jMenu2.add(jMenuItem11);

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem13.setText("Paste from history");
        jMenuItem13.setToolTipText("Paste multiple lines from history");
        jMenu2.add(jMenuItem13);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jMenuItem14.setText("Delete");
        jMenuItem14.setToolTipText("Delete selected text");
        jMenu2.add(jMenuItem14);

        jMenuItemSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSelectAll.setText("Select All");
        jMenuItemSelectAll.setToolTipText("Select all text in the document");
        jMenuItemSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectAllActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemSelectAll);

        jMenu7.setText("Goto line");
        jMenu7.setToolTipText("Quick editor navigation");

        jMenuItem17.setText("First");
        jMenu7.add(jMenuItem17);

        jMenuItem18.setText("Last");
        jMenu7.add(jMenuItem18);

        jMenuItem19.setText("Middle");
        jMenu7.add(jMenuItem19);

        jMenuItem20.setText("Custom");
        jMenu7.add(jMenuItem20);

        jMenu2.add(jMenu7);
        jMenu2.add(jSeparator6);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem15.setText("Find");
        jMenuItem15.setToolTipText("Find a word(s)");
        jMenu2.add(jMenuItem15);

        jMenuItem21.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem21.setText("Replace");
        jMenuItem21.setToolTipText("Replace a word(s)");
        jMenu2.add(jMenuItem21);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Debug");

        jMenuItemCompile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItemCompile.setText("Compile");
        jMenuItemCompile.setToolTipText("Compile program into bytecode");
        jMenuItemCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCompileActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemCompile);

        jMenuItemRun.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemRun.setText("Run");
        jMenuItemRun.setToolTipText("Interpret current script");
        jMenu3.add(jMenuItemRun);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Window");
        jMenuBar1.add(jMenu4);

        jMenu5.setText("Help");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Help contents");
        jMenuItem1.setToolTipText("Read the offline docs");
        jMenu5.add(jMenuItem1);

        jMenuItem2.setText("Online help");
        jMenuItem2.setToolTipText("Read the online docs");
        jMenu5.add(jMenuItem2);

        jMenuItem25.setText("Report a bug");
        jMenuItem25.setToolTipText("Open an issue of github");
        jMenu5.add(jMenuItem25);
        jMenu5.add(jSeparator7);

        jMenuItemAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemAbout.setText("About");
        jMenuItemAbout.setToolTipText("About this application");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItemAbout);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUndoActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        SynEdit editor = editors.get(index);
        if (editor.canUndo()) {
            System.out.println("Undo on tab: " + index);
            System.out.println(editors.get(index));
            editor.doUndo();
        }
    }//GEN-LAST:event_jMenuItemUndoActionPerformed

    private void jMenuItemRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRedoActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        SynEdit editor = editors.get(index);
        if (editor.canRedo()) {
            editor.doRedo();
            System.out.println(index);
            System.out.println(editors.get(index));
        }
    }//GEN-LAST:event_jMenuItemRedoActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItemNewScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewScriptActionPerformed
        addEditor("");
    }//GEN-LAST:event_jMenuItemNewScriptActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        String sMessage = "luaIDE - for the lua gods.\nby Gama Sibusiso ";
        JOptionPane.showMessageDialog(this, sMessage, "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        if (index < 0) {
            return;
        }

        SynEdit editor = editors.get(index);

        if (editor.canUndo() == true) {
            if (saveBeforeExit() == true) {
                // TODO: save the file 
            }
        }

        jTabbedPane1.removeTabAt(index);
        editors.remove(index);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItemNewProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewProjectActionPerformed
        NewProject np = new NewProject();
        np.setVisible(true);

    }//GEN-LAST:event_jMenuItemNewProjectActionPerformed

    private void jMenuItemOpenScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenScriptActionPerformed
        JFileChooser jfc = new JFileChooser(System.getProperty("user.dir"));
        FileFilter filter = new FileNameExtensionFilter("Lua Script file", "lua");
        jfc.addChoosableFileFilter(filter);
        filter = new FileNameExtensionFilter("Regular text file", "txt");
        jfc.addChoosableFileFilter(filter);
        int returnValue = jfc.showOpenDialog(null);
        //int returnValue = jfc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            String name = "";
            try {
                File selectedFile = jfc.getSelectedFile();
                name = selectedFile.getName();
                Scanner sScan = new Scanner(selectedFile);
                String contents = "";

                while (sScan.hasNextLine()) {
                    contents += sScan.nextLine() + "\n";
                }
                sScan.close();

                int index = jTabbedPane1.getSelectedIndex();
                jTabbedPane1.setTitleAt(index, name);
                SynEdit editor = editors.get(index);
                editor.setFile(selectedFile);
                editor.setText(contents);

                System.out.println("ED: " + editor.hasFile());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItemOpenScriptActionPerformed

    private void jMenuItemCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCompileActionPerformed

        terminal.setVisible(true);

//        terminal.appendTextLine("Hello, world");
        int index = jTabbedPane1.getSelectedIndex();
        SynEdit editor = editors.get(index);

        if (editor.hasFile() == false || editor.canUndo()) {
            jMenuItemSaveActionPerformed(evt);
        }

        File file = editor.getFile();
        String path = file.getPath();
        String name = file.getName();
        terminal.setText("======================= running " + name + ".lua =================================");

        System.out.println(path);
        try {
            Process pro = Runtime.getRuntime().exec("lua " + path);
            pro.waitFor();
            String line = "";
            InputStream ins = pro.getInputStream();
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(ins));
            while ((line = in.readLine()) != null) {
                terminal.appendTextLine(">> " + line);
            }
        } catch (IOException ex) {
            String msg = ex.getMessage();
            terminal.appendTextLine(msg);
            //Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            terminal.appendTextLine("ERROR: " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemCompileActionPerformed

    private void jMenuItemSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectAllActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        SynEdit editor = editors.get(index);
        editor.selectAllText();

    }//GEN-LAST:event_jMenuItemSelectAllActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        JFileChooser jfc = new JFileChooser(System.getProperty("user.dir"));
        FileFilter filter = new FileNameExtensionFilter("Lua Script file", "lua");
        jfc.addChoosableFileFilter(filter);
        filter = new FileNameExtensionFilter("Regular text file", "txt");
        jfc.addChoosableFileFilter(filter);

        int index = jTabbedPane1.getSelectedIndex();
        SynEdit editor = editors.get(index);

        if (editor.hasFile() == false) {
            jfc.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY, new PropertyChangeListener() {
                public void propertyChange(PropertyChangeEvent evt) {
                    Object o = evt.getNewValue();
                    if (o instanceof FileNameExtensionFilter) {
                        FileNameExtensionFilter filter = (FileNameExtensionFilter) o;

                        String ex = filter.getExtensions()[0];
                        System.out.println(ex);
                    }
                }
            });

            //int returnValue = jfc.showOpenDialog(null);
            int returnValue = jfc.showSaveDialog(null);

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File file = jfc.getSelectedFile();
                // String extension = getExtensionForFilter(jfc.getFileFilter());
//            if (!file.getName().toLowerCase().endsWith(".lua")) {
//            File savefile = new File(file.getParentFile(), file.getName() + ".txt");
//            }
                FileWriter myWriter;
                try {
                    System.out.println("Created file @: " + file.getAbsolutePath());
                    myWriter = new FileWriter(file.getAbsolutePath());
                    myWriter.write(editor.getText());
                    myWriter.close();
                    editor.setFile(file);
                    jTabbedPane1.setTitleAt(index, file.getName());
                } catch (IOException ex) {
                    Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            File file = editor.getFile();
            FileWriter myWriter;
            try {
                System.out.println("Modified file @: " + file.getAbsolutePath());
                myWriter = new FileWriter(file.getAbsoluteFile());
                myWriter.write(editor.getText());
                myWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        loadDirectory(System.getProperty("user.dir"));
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private boolean saveBeforeExit() {
        int index = jTabbedPane1.getSelectedIndex();
        SynEdit editor = editors.get(index);
        int a = JOptionPane.showConfirmDialog(editor, "Save file before closing editor? ");
        if (a == JOptionPane.YES_OPTION) {
            return true;
        }
        return false;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemCompile;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemNewProject;
    private javax.swing.JMenuItem jMenuItemNewScript;
    private javax.swing.JMenuItem jMenuItemOpenScript;
    private javax.swing.JMenuItem jMenuItemRedo;
    private javax.swing.JMenuItem jMenuItemRun;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenuItem jMenuItemSelectAll;
    private javax.swing.JMenuItem jMenuItemUndo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
